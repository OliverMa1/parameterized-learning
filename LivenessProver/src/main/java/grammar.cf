Model. ModelRule ::= "I0" AutomatonRule
                     MaybeClosed
                     "F" AutomatonRule
                     "P1" TransducerRule
                     "P2" TransducerRule
                     [VerifierOption];

--                     StateTransducerRule
--                     StateAutomatonRule
--                     InitStateAutomatonRule;

--transducer
Transducer. TransducerRule ::= "{"  InitRule [TransitionRule] AcceptingRule "}";
TransducerInitialState. InitRule ::= "init" ":" Name ";";
FulTransition. TransitionRule ::=  Name "->" Name Name "/" Name;
EmptyTransition. TransitionRule ::= Name "->" Name;
LoopingTransition. TransitionRule ::= "loop" ":" [Name];
TransducerAccepting. AcceptingRule ::= "accepting" ":" [Name] ";";


--Automaton
Automaton. AutomatonRule ::=  "{" AutomataInitRule [AutomataTransitionRule] AutomataAcceptingsRule "}" ;
AutomataInitialState. AutomataInitRule ::= "init" ":" Name ";";
AutomataTransition. AutomataTransitionRule ::= Name "->" Name Name;
AutomataEmptyTransition. AutomataTransitionRule ::= Name "->" Name;
AutomataAcceptings. AutomataAcceptingsRule ::= "accepting" ":" [Name] ";";

--Number of state guessing
NumOfStatesTransducerGuess.    VerifierOption ::= "transducerStateGuessing" ":" Integer ".." Integer ;
NumOfStatesAutomatonGuess.     VerifierOption ::= "automatonStateGuessing" ":" Integer ".." Integer ;
NumOfInitStatesAutomatonGuess. VerifierOption ::= "initAutomatonStateGuessing" ":" Integer ".." Integer ;
SymmetryOptions.               VerifierOption ::= "symmetries" ":" [SymmetryOption];
ExplicitChecks.                VerifierOption ::= "explicitChecksUntilLength" ":" Integer;
UseRankingFunctions.           VerifierOption ::= "useRankingFunctions";

terminator VerifierOption ";";

RotationSymmetry.              SymmetryOption ::= "rotation";

separator SymmetryOption ",";

--initial states closed under transitions
ClosedInit.     MaybeClosed ::= "closedUnderTransitions" ";" ;
NotClosedInit.  MaybeClosed ::= ;


NumberName. Name ::= Integer;
LiteralName. Name ::= Ident;

comment "/**" "**/" ;
comment "/*" "*/" ;
comment "//";

separator 	TransitionRule ";";
separator 	AutomataTransitionRule ";";
separator 	Name ",";
