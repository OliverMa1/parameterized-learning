
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 22 23:19:43 CET 2016
//----------------------------------------------------

package grammar;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 22 23:19:43 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\014\000\002\003" +
    "\007\000\002\004\006\000\002\005\010\000\002\005\005" +
    "\000\002\005\005\000\002\006\006\000\002\007\007\000" +
    "\002\010\006\000\002\011\006\000\002\011\005\000\002" +
    "\012\006\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\005\000\002\013\005\000\002\013\003" +
    "\000\002\014\002\000\002\014\005\000\002\015\003\000" +
    "\002\016\002\000\002\016\003\000\002\016\005\000\002" +
    "\017\004\000\002\017\002\000\002\020\003\000\002\020" +
    "\003\000\002\021\002\000\002\021\003\000\002\021\005" +
    "\000\002\022\002\000\002\022\003\000\002\022\005\000" +
    "\002\023\002\000\002\023\003\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\015\005\001\002\000\004\002\137\001" +
    "\002\000\004\004\007\001\002\000\006\014\uffe7\022\040" +
    "\001\002\000\004\024\010\001\002\000\004\006\035\001" +
    "\002\000\010\020\uffe1\033\015\034\014\001\002\000\004" +
    "\010\032\001\002\000\006\007\030\020\uffe0\001\002\000" +
    "\020\007\uffe5\010\uffe5\011\uffe5\013\uffe5\020\uffe5\033\uffe5" +
    "\034\uffe5\001\002\000\020\007\uffe6\010\uffe6\011\uffe6\013" +
    "\uffe6\020\uffe6\033\uffe6\034\uffe6\001\002\000\004\020\017" +
    "\001\002\000\004\006\022\001\002\000\004\005\021\001" +
    "\002\000\010\014\ufff9\016\ufff9\022\ufff9\001\002\000\010" +
    "\007\uffde\033\015\034\014\001\002\000\010\007\uffdd\013" +
    "\026\020\uffdd\001\002\000\004\007\025\001\002\000\004" +
    "\005\ufff5\001\002\000\012\007\uffde\020\uffde\033\015\034" +
    "\014\001\002\000\006\007\uffdc\020\uffdc\001\002\000\010" +
    "\020\uffe1\033\015\034\014\001\002\000\004\020\uffdf\001" +
    "\002\000\006\033\015\034\014\001\002\000\012\007\ufff6" +
    "\020\ufff6\033\015\034\014\001\002\000\006\007\ufff7\020" +
    "\ufff7\001\002\000\006\033\015\034\014\001\002\000\004" +
    "\007\037\001\002\000\010\020\ufff8\033\ufff8\034\ufff8\001" +
    "\002\000\004\007\136\001\002\000\004\014\042\001\002" +
    "\000\004\004\007\001\002\000\004\016\044\001\002\000" +
    "\004\004\046\001\002\000\004\017\077\001\002\000\004" +
    "\024\050\001\002\000\012\020\uffe4\026\055\033\015\034" +
    "\014\001\002\000\004\006\051\001\002\000\006\033\015" +
    "\034\014\001\002\000\004\007\053\001\002\000\012\020" +
    "\ufffe\026\ufffe\033\ufffe\034\ufffe\001\002\000\004\010\072" +
    "\001\002\000\004\006\070\001\002\000\006\007\066\020" +
    "\uffe3\001\002\000\004\020\061\001\002\000\004\005\065" +
    "\001\002\000\004\006\062\001\002\000\010\007\uffde\033" +
    "\015\034\014\001\002\000\004\007\064\001\002\000\004" +
    "\005\ufffa\001\002\000\022\002\uffff\017\uffff\021\uffff\023" +
    "\uffff\025\uffff\030\uffff\031\uffff\032\uffff\001\002\000\012" +
    "\020\uffe4\026\055\033\015\034\014\001\002\000\004\020" +
    "\uffe2\001\002\000\012\007\uffde\020\uffde\033\015\034\014" +
    "\001\002\000\006\007\ufffb\020\ufffb\001\002\000\006\033" +
    "\015\034\014\001\002\000\012\007\ufffc\020\ufffc\033\015" +
    "\034\014\001\002\000\004\011\075\001\002\000\006\033" +
    "\015\034\014\001\002\000\006\007\ufffd\020\ufffd\001\002" +
    "\000\004\004\046\001\002\000\020\002\uffee\021\uffee\023" +
    "\uffee\025\uffee\030\uffee\031\uffee\032\uffee\001\002\000\020" +
    "\002\000\021\107\023\106\025\105\030\104\031\103\032" +
    "\102\001\002\000\004\007\uffef\001\002\000\004\006\132" +
    "\001\002\000\004\006\124\001\002\000\004\006\120\001" +
    "\002\000\004\006\116\001\002\000\004\006\112\001\002" +
    "\000\004\007\111\001\002\000\020\002\uffed\021\uffed\023" +
    "\uffed\025\uffed\030\uffed\031\uffed\032\uffed\001\002\000\004" +
    "\033\113\001\002\000\004\012\114\001\002\000\004\033" +
    "\115\001\002\000\004\007\ufff3\001\002\000\004\033\117" +
    "\001\002\000\004\007\ufff0\001\002\000\004\033\121\001" +
    "\002\000\004\012\122\001\002\000\004\033\123\001\002" +
    "\000\004\007\ufff2\001\002\000\006\007\uffeb\027\126\001" +
    "\002\000\006\007\uffea\013\130\001\002\000\006\007\uffec" +
    "\013\uffec\001\002\000\004\007\ufff1\001\002\000\006\007" +
    "\uffeb\027\126\001\002\000\004\007\uffe9\001\002\000\004" +
    "\033\133\001\002\000\004\012\134\001\002\000\004\033" +
    "\135\001\002\000\004\007\ufff4\001\002\000\004\014\uffe8" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\007\005\001\001\000\004\017\040\001\001\000\004" +
    "\010\010\001\001\000\002\001\001\000\010\011\012\020" +
    "\011\022\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\022\023\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\022\023\026" +
    "\001\001\000\002\001\001\000\010\011\012\020\011\022" +
    "\030\001\001\000\002\001\001\000\004\020\032\001\001" +
    "\000\004\020\033\001\001\000\002\001\001\000\004\020" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\042\001\001\000" +
    "\002\001\001\000\004\003\044\001\001\000\002\001\001" +
    "\000\004\004\046\001\001\000\010\005\055\020\053\021" +
    "\056\001\001\000\002\001\001\000\004\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\022\023" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\055\020\053\021\066\001\001\000" +
    "\002\001\001\000\006\020\022\023\070\001\001\000\002" +
    "\001\001\000\004\020\072\001\001\000\004\020\073\001" +
    "\001\000\002\001\001\000\004\020\075\001\001\000\002" +
    "\001\001\000\004\003\077\001\001\000\004\014\100\001" +
    "\001\000\004\013\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\124\016\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\124\016" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public grammar.Absyn.ModelRule pModelRule() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (grammar.Absyn.ModelRule) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListName ::= Name _SYMB_7 ListName 
            {
              grammar.Absyn.ListName RESULT =null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListName ::= Name 
            {
              grammar.Absyn.ListName RESULT =null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListName ::= 
            {
              grammar.Absyn.ListName RESULT =null;
		 RESULT = new grammar.Absyn.ListName(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListAutomataTransitionRule ::= AutomataTransitionRule _SYMB_3 ListAutomataTransitionRule 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT =null;
		grammar.Absyn.AutomataTransitionRule p_1 = (grammar.Absyn.AutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListAutomataTransitionRule p_3 = (grammar.Absyn.ListAutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAutomataTransitionRule",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListAutomataTransitionRule ::= AutomataTransitionRule 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT =null;
		grammar.Absyn.AutomataTransitionRule p_1 = (grammar.Absyn.AutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ListAutomataTransitionRule(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAutomataTransitionRule",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListAutomataTransitionRule ::= 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT =null;
		 RESULT = new grammar.Absyn.ListAutomataTransitionRule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAutomataTransitionRule",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListTransitionRule ::= TransitionRule _SYMB_3 ListTransitionRule 
            {
              grammar.Absyn.ListTransitionRule RESULT =null;
		grammar.Absyn.TransitionRule p_1 = (grammar.Absyn.TransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListTransitionRule p_3 = (grammar.Absyn.ListTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTransitionRule",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListTransitionRule ::= TransitionRule 
            {
              grammar.Absyn.ListTransitionRule RESULT =null;
		grammar.Absyn.TransitionRule p_1 = (grammar.Absyn.TransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ListTransitionRule(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTransitionRule",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListTransitionRule ::= 
            {
              grammar.Absyn.ListTransitionRule RESULT =null;
		 RESULT = new grammar.Absyn.ListTransitionRule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTransitionRule",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Name ::= _IDENT_ 
            {
              grammar.Absyn.Name RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.LiteralName(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Name",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Name ::= _INTEGER_ 
            {
              grammar.Absyn.Name RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.NumberName(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Name",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MaybeClosed ::= 
            {
              grammar.Absyn.MaybeClosed RESULT =null;
		 RESULT = new grammar.Absyn.NotClosedInit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeClosed",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MaybeClosed ::= _SYMB_14 _SYMB_3 
            {
              grammar.Absyn.MaybeClosed RESULT =null;
		 RESULT = new grammar.Absyn.ClosedInit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeClosed",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListSymmetryOption ::= SymmetryOption _SYMB_7 ListSymmetryOption 
            {
              grammar.Absyn.ListSymmetryOption RESULT =null;
		grammar.Absyn.SymmetryOption p_1 = (grammar.Absyn.SymmetryOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListSymmetryOption p_3 = (grammar.Absyn.ListSymmetryOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSymmetryOption",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListSymmetryOption ::= SymmetryOption 
            {
              grammar.Absyn.ListSymmetryOption RESULT =null;
		grammar.Absyn.SymmetryOption p_1 = (grammar.Absyn.SymmetryOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ListSymmetryOption(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSymmetryOption",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListSymmetryOption ::= 
            {
              grammar.Absyn.ListSymmetryOption RESULT =null;
		 RESULT = new grammar.Absyn.ListSymmetryOption(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSymmetryOption",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SymmetryOption ::= _SYMB_19 
            {
              grammar.Absyn.SymmetryOption RESULT =null;
		 RESULT = new grammar.Absyn.RotationSymmetry(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SymmetryOption",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListVerifierOption ::= ListVerifierOption VerifierOption _SYMB_3 
            {
              grammar.Absyn.ListVerifierOption RESULT =null;
		grammar.Absyn.ListVerifierOption p_1 = (grammar.Absyn.ListVerifierOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.VerifierOption p_2 = (grammar.Absyn.VerifierOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVerifierOption",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListVerifierOption ::= 
            {
              grammar.Absyn.ListVerifierOption RESULT =null;
		 RESULT = new grammar.Absyn.ListVerifierOption(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVerifierOption",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VerifierOption ::= _SYMB_22 
            {
              grammar.Absyn.VerifierOption RESULT =null;
		 RESULT = new grammar.Absyn.UseRankingFunctions(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerifierOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VerifierOption ::= _SYMB_15 _SYMB_2 _INTEGER_ 
            {
              grammar.Absyn.VerifierOption RESULT =null;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ExplicitChecks(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerifierOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VerifierOption ::= _SYMB_20 _SYMB_2 ListSymmetryOption 
            {
              grammar.Absyn.VerifierOption RESULT =null;
		grammar.Absyn.ListSymmetryOption p_3 = (grammar.Absyn.ListSymmetryOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.SymmetryOptions(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerifierOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VerifierOption ::= _SYMB_17 _SYMB_2 _INTEGER_ _SYMB_6 _INTEGER_ 
            {
              grammar.Absyn.VerifierOption RESULT =null;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Integer p_5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.NumOfInitStatesAutomatonGuess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerifierOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VerifierOption ::= _SYMB_13 _SYMB_2 _INTEGER_ _SYMB_6 _INTEGER_ 
            {
              grammar.Absyn.VerifierOption RESULT =null;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Integer p_5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.NumOfStatesAutomatonGuess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerifierOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VerifierOption ::= _SYMB_21 _SYMB_2 _INTEGER_ _SYMB_6 _INTEGER_ 
            {
              grammar.Absyn.VerifierOption RESULT =null;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Integer p_5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.NumOfStatesTransducerGuess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerifierOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AutomataAcceptingsRule ::= _SYMB_12 _SYMB_2 ListName _SYMB_3 
            {
              grammar.Absyn.AutomataAcceptingsRule RESULT =null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.AutomataAcceptings(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AutomataAcceptingsRule",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AutomataTransitionRule ::= Name _SYMB_4 Name 
            {
              grammar.Absyn.AutomataTransitionRule RESULT =null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.AutomataEmptyTransition(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AutomataTransitionRule",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AutomataTransitionRule ::= Name _SYMB_4 Name Name 
            {
              grammar.Absyn.AutomataTransitionRule RESULT =null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.Name p_4 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.AutomataTransition(p_1,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AutomataTransitionRule",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AutomataInitRule ::= _SYMB_16 _SYMB_2 Name _SYMB_3 
            {
              grammar.Absyn.AutomataInitRule RESULT =null;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.AutomataInitialState(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AutomataInitRule",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AutomatonRule ::= _SYMB_0 AutomataInitRule ListAutomataTransitionRule AutomataAcceptingsRule _SYMB_1 
            {
              grammar.Absyn.AutomatonRule RESULT =null;
		grammar.Absyn.AutomataInitRule p_2 = (grammar.Absyn.AutomataInitRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.ListAutomataTransitionRule p_3 = (grammar.Absyn.ListAutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.AutomataAcceptingsRule p_4 = (grammar.Absyn.AutomataAcceptingsRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.Automaton(p_2,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AutomatonRule",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AcceptingRule ::= _SYMB_12 _SYMB_2 ListName _SYMB_3 
            {
              grammar.Absyn.AcceptingRule RESULT =null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.TransducerAccepting(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AcceptingRule",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TransitionRule ::= _SYMB_18 _SYMB_2 ListName 
            {
              grammar.Absyn.TransitionRule RESULT =null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.LoopingTransition(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TransitionRule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TransitionRule ::= Name _SYMB_4 Name 
            {
              grammar.Absyn.TransitionRule RESULT =null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.EmptyTransition(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TransitionRule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TransitionRule ::= Name _SYMB_4 Name Name _SYMB_5 Name 
            {
              grammar.Absyn.TransitionRule RESULT =null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.Name p_4 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_6 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.FulTransition(p_1,p_3,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TransitionRule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InitRule ::= _SYMB_16 _SYMB_2 Name _SYMB_3 
            {
              grammar.Absyn.InitRule RESULT =null;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.TransducerInitialState(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InitRule",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TransducerRule ::= _SYMB_0 InitRule ListTransitionRule AcceptingRule _SYMB_1 
            {
              grammar.Absyn.TransducerRule RESULT =null;
		grammar.Absyn.InitRule p_2 = (grammar.Absyn.InitRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.ListTransitionRule p_3 = (grammar.Absyn.ListTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.AcceptingRule p_4 = (grammar.Absyn.AcceptingRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.Transducer(p_2,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TransducerRule",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ModelRule ::= _SYMB_9 AutomatonRule MaybeClosed _SYMB_8 AutomatonRule _SYMB_10 TransducerRule _SYMB_11 TransducerRule ListVerifierOption 
            {
              grammar.Absyn.ModelRule RESULT =null;
		grammar.Absyn.AutomatonRule p_2 = (grammar.Absyn.AutomatonRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		grammar.Absyn.MaybeClosed p_3 = (grammar.Absyn.MaybeClosed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		grammar.Absyn.AutomatonRule p_5 = (grammar.Absyn.AutomatonRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		grammar.Absyn.TransducerRule p_7 = (grammar.Absyn.TransducerRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.TransducerRule p_9 = (grammar.Absyn.TransducerRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.ListVerifierOption p_10 = (grammar.Absyn.ListVerifierOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.Model(p_2,p_3,p_5,p_7,p_9,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ModelRule",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ModelRule EOF 
            {
              Object RESULT =null;
		grammar.Absyn.ModelRule start_val = (grammar.Absyn.ModelRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

